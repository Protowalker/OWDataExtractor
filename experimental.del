import "helper.del";
import "debug.del";

///SETTINGS


//EVENTS
globalvar define collectDamageEvents = WorkshopSettingToggle("Events", "Collect Damage Events", true);
globalvar define collectHealingEvents = WorkshopSettingToggle("Events", "Collect Healing Events", true);
globalvar define collectKnockbackEvents = WorkshopSettingToggle("Events", "Collect Knockback Events", true);
globalvar define collectFinalBlowEvents = WorkshopSettingToggle("Events", "Collect Final Blow Events", true);


//DATA
globalvar define collectIsAliveData = WorkshopSettingToggle("Data", "Collect \"Is Alive\" data", true);
globalvar define collectPositionData = WorkshopSettingToggle("Data", "Collect Position data", true);
globalvar define collectFacingData = WorkshopSettingToggle("Data", "Collect Facing Direction data", true);
globalvar define collectAbilityData = WorkshopSettingToggle("Data", "Collect \"Active Ability\" data", true);

globalvar define collectHealthData = WorkshopSettingToggle("Data", "Collect Health data", true);
globalvar define collectVelocityData = WorkshopSettingToggle("Data", "Collect Velocity data", false);

///


enum Ability {
    Ability1 = 1,
    Ability2 = 2,
    PrimaryFire = 4,
    SecondaryFire = 8,
    Melee = 16,
    Ultimate = 32
}

playervar define currentRoundData = [];
playervar define dataIndex = 0;


//Current Round Events

globalvar define CRE_timestamp = [];

globalvar define CRE_type = [];
globalvar define CRE_aName = [];
globalvar define CRE_vName = [];
globalvar define CRE_value = [];


globalvar define eventIndex = 0;


globalvar define timer = 0;

define Millis: timer%1;

rule: "Setup"
{
    ChaseVariableAtRate(timer, 999999999, 1, RateChaseReevaluation.DestinationAndRate);
    DisableInspectorRecording();
    CRE_type[0] = [];
    CRE_aName[0] = [];
    CRE_vName[0] = [];
    CRE_value[0] = [];
}

rule: "Player Setup"
Event.OngoingPlayer
{

}

enum EventType {
    Damage,
    Healing,
    FinalBlow,
    Knockback
}


define Name(define player): <"<0>", player>;

rule: "Player Takes Damage"
Event.OnDamageTaken 
if(IsGameInProgress())
if(collectDamageEvents){
    //Attacker().currentRoundData = Append(currentRoundData, getPlayerData(Attacker()));
    //Victim().currentRoundData = Append(currentRoundData, getPlayerData(Victim())); 

    AppendToEvents(EventType.Damage, Attacker(), Victim(), EventDamage());
}

rule: "Player Receives Healing"
Event.OnHealingTaken 
if(IsGameInProgress())
if(collectHealingEvents){
    //Healer().currentRoundData = Append(currentRoundData, getPlayerData(Healer()));
    //Healee().currentRoundData = Append(currentRoundData, getPlayerData(Healee()));

    AppendToEvents(EventType.Healing, Healer(), Healee(), EventHealing());
}

rule: "Player Dies"
Event.OnFinalBlow
if(IsGameInProgress())
if(collectFinalBlowEvents) {
    //Attacker().currentRoundData = Append(currentRoundData, getPlayerData(Attacker())); 
    //Victim().currentRoundData = Append(currentRoundData, getPlayerData(Victim())); 
    AppendToEvents(EventType.FinalBlow, Attacker(), Victim(), EventDamage());
}

rule: "Player Takes Knockback"
Event.PlayerDealtKnockback
if(IsGameInProgress())
if(collectKnockbackEvents)
 {
    //Attacker().currentRoundData = Append(currentRoundData, getPlayerData(Attacker())); 
    //Victim().currentRoundData = Append(currentRoundData, getPlayerData(Victim())); 
    AppendToEvents(EventType.Knockback, Attacker(), Victim(), EventDirection());
}

rule: "Get data once every 5 seconds otherwise"
Event.OngoingPlayer
if(IsGameInProgress()){
    AppendToData(EventPlayer, getPlayerData(EventPlayer));
    Wait(5);
    LoopIfConditionIsTrue();
}

void AppendToEvents(ref EventType type, ref define aName, ref define vName, ref define value){
    if(eventIndex >= 50){
        define round = MatchRound() - 1;
        if(events[round] == 0){
            events[round] = [];
        }
        events[round][CountOf(events[round])] = [CRE_type, CRE_timestamp, MappedArray(CRE_aName, Name(ArrayElement())), MappedArray(CRE_vName, Name(ArrayElement())), CRE_value];

        CRE_timestamp = [];
        CRE_type = [];
        CRE_aName = [];
        CRE_vName = [];
        CRE_value = [];
        eventIndex = 0;
    }
    CRE_timestamp[eventIndex] = (TotalTimeElapsed() + Millis);
    CRE_type[eventIndex] = type;
    CRE_aName[eventIndex] = aName;
    CRE_vName[eventIndex] = vName;
    CRE_value[eventIndex] = value;
    eventIndex++;
}

define GlobalPlayerSlot(define player): SlotOf(player) + (TeamOf(player)==Team.Team2)?6:0;

void AppendToData(define player, define value){
    if(player.dataIndex >= 50){
        define currentRound = MatchRound() - 1;
        if(data[currentRound] == 0) {
            data[currentRound] = [];
        }
        
        data[currentRound][GlobalPlayerSlot(player)] = Append(data[currentRound][GlobalPlayerSlot(player)], player.currentRoundData);
        player.currentRoundData = [];
        player.dataIndex = 0;
    }
    player.currentRoundData[player.dataIndex] = value;
    player.dataIndex++;
}


globalvar define data = [];
globalvar define events = [];

globalvar define activeDataPieces = [];

rule: "Round complete, store final data"
if(IsBetweenRounds() ||IsMatchComplete()){
    define round = MatchRound() - 1;
    events[round][CountOf(events[round])] = [CRE_type, CRE_timestamp, MappedArray(CRE_aName, Name(ArrayElement())), MappedArray(CRE_vName, Name(ArrayElement())), CRE_value];
    CRE_timestamp = [];
    CRE_type = [];
    CRE_aName = [];
    CRE_vName = [];
    CRE_value = [];
    
    eventIndex = 0;
    MinWait();

    if(IsMatchComplete()){
        activeDataPieces = [collectIsAliveData,
                            collectPositionData,
                            collectFacingData,
                            collectHealthData,
                            collectVelocityData,
                            collectAbilityData];
        EnableInspectorRecording();
    }
}

define getPlayerData(define player) {

    define abilityFlags = 0;

    abilityFlags += IsUsingAbility1()*Ability.Ability1;
    abilityFlags += IsUsingAbility2()*Ability.Ability2;
    abilityFlags += IsFiringPrimary()*Ability.PrimaryFire;
    abilityFlags += IsFiringSecondary()*Ability.SecondaryFire;
    abilityFlags += IsMeleeing()*Ability.Melee;
    abilityFlags += IsUsingUltimate()*Ability.Ultimate;


    return [
        MatchTime() + Millis,
        collectIsAliveData ? EP_Alive : 0,
        collectPositionData ? EP_Position : 0,
        collectFacingData ? EP_Direction : 0,
        collectHealthData ? EP_Health : 0,
        collectVelocityData ? EP_Velocity : 0,
        collectAbilityData ? abilityFlags : 0
    ];
}



